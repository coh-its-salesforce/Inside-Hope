<!-- 
* Description: Component File Upload.
* Attribute: objectId - The ID of the record uploaded documents will be attached to.
* Date: 10/13/2012
* Author: José Luis Almazán. Based on Jason Venable (TehNrd) code.
-->
<apex:component controller="FileUploadController" allowDML="true"> 
    <apex:attribute name="objectId" description="The ID of the record uploaded documents will be attached to." type="String" required="true"/>
    <apex:attribute name="attachmentID" description="The ID of the attachment." type="String" />
    
    <!-- Scripts -->
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"/>

    <!-- Styles -->
    <style type="text/css">
        .buttonTD{
            padding-left: 6px;
            vertical-align: top;
        }
        .clear{
            clear:both;
        }
        .fileName{
            float: left;
            max-width: 235px;
            overflow: hidden;
            position: absolute;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .percentComplete{
            float: right;
        }
        .statusBar{
            background: none repeat scroll 0 0 #FFFFFF;
            border: 1px solid #EAEAEA;
            height: 11px;
            padding: 0 2px 0 0;
        }
        .statusBarPercent{
            background-color: #1797C0;
            float: left;
            height: 9px;
            margin: 1px;
            max-width: 100%;
        }
        .statusBarPercentError{
            background-color: #CE0000;
        }
        .upload{
            background-color: white;
            border: 1px solid #CACACA;
            border-radius: 3px 3px 3px 3px;
            margin-top: 6px;
            padding: 4px;
        }
        .uploadBox{
            background-color: #F8F8F8;
            border: 1px solid #EAEAEA;
            border-radius: 4px 4px 4px 4px;
            color: #333333;
            font-size: 12px;
            padding: 6px;
            width: 90%;
            text-align: left;
            margin-left: auto;
            margin-right: auto;
            margin-top: 10px;
        }
        .uploadError{
            border-color: #CE0000;
        }
        .uploadTable{
        }
        .spinner{
            border:none;
            background-color:#FFF;
            background-image:url(/img/dataCategories/spinner.gif);
            background-position:center center;
            background-repeat:no-repeat;
            width:16px;
            height:16px
        }
    </style>
 
    <!-- Component -->
    <div class="uploadBox">
        <table cellpadding="0" cellspacing="0" class="uploadTable">
            <tr>
                <td>
                    <!-- Input file -->
                    <input type="file" name="filesInput" id="filesInput" /><!--multiple="false"-->
                </td>
                <td class="buttonTD">
                    <input id="uploadButton" type="button" title="Upload" class="btn" style="display: none;" value=" Upload "/>
                    <input id="clearButton" type="button" title="Clear" class="btn" value=" Clear "/>
                    <input id="cancelButton" type="button" title="Cancel" class="btn" style="display: none;" value=" Cancel "/>
                    <input id="refreshButton" type="button" title="Refresh" class="btn" style="display: none;" value=" Refresh "/>
                    <div id="uploadspinner" class="spinner" style="display: none;"/>
                </td>
            </tr>
        </table>
        <!-- Error -->
        <div id="uploadErrorContent" class="message errorM3" style="display:none;">
            <table border="0" cellpadding="0" cellspacing="0" class="messageTable">
                <tbody>
                    <tr valign="top">
                        <td>
                            <img class="msgIcon" src="/s.gif"/>
                        </td>
                        <td class="messageCell">
                            <div id="" class="messageText">
                                <h4 id="uploadErrorTitle" style="color:#cc0000">Error:</h4>
                                <span id="uploadErrorBody"></span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Script -->
    <script type="text/javascript">
        var objectId = '{!objectId}';
        var byteChunkArray; 
        var files;
        var currentFile;
        var $upload;
        var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
        var VIEW_URL = '/servlet/servlet.FileDownload?file=';
        var reader;
        var attachmentIdCreated = '{!attachmentID}';
        var stopProcess = false;
        var j$ = jQuery.noConflict();
        
        j$(document).ready(function() {
            //Event listener for click of Upload button
            j$("#uploadButton").click(function(){
                hideUploadError();
                prepareFileUploads();
            });
    
            //Event listener to clear upload details/status bars once upload is complete
            j$("#clearButton").click(function(){
                j$(".upload").remove();
                hideUploadError();
            });
            
            //Event listener to cancel upload when upload is in progress
            j$("#cancelButton").click(function(){
                stopProcess = true;
                j$('#cancelButton').hide();
                j$('#uploadspinner').show();
            });
            
            //Event listener (onchange event of filesInput)
            j$('#filesInput').change(function(){
                onChangeFileInput();
            });
            
            //Event listener to delete uploaded file
            j$('.deleteButton').live('click', function(){
                var $deleteButton = j$(this);
                $deleteButton.hide();
                //Delete the attachment created. Use js remoting to delete the attachment
                deleteAttachment($deleteButton.attr('id'), 
                function(){
                    //OK
                    $deleteButton.parent(".upload").remove();
                }, 
                function(){
                    //KO
                    //Show error
                    showUploadError(currentFile.name + ' --> ' + event.message, false);
                    $deleteButton.show();
                });
            });
            
            //Event listener to refresh parent page
            j$("#refreshButton").click(function(){
                parent.location.reload();
            });
        });
    
        //Onchange event of filesInput
        function onChangeFileInput(){
            //Get the file(s) from the input field
            if (document.getElementById('filesInput').files.length == 0){
                j$('#uploadButton').hide();
                //Hide error div
                hideUploadError();
            } else {
                j$('#uploadButton').show();
                //Check size of files ti upload
                checkSize(); 
            }
        }
        
        //Cancel the upload
        function cancelFileUploads(){   
            /*Remove the browse input element and replace it, this essentially removes
            the selected files and helps prevent duplicate uploads*/
            replaceFilesInput();
            
            //upload status
            $upload.attr('data-status','cancel');
            $upload.addClass('uploadError');
            $upload.find(".statusPercent").addClass('statusPercentError');
            $upload.attr('title','Upload canceled');
            
            //Delete the attachment created. Use js remoting to delete the attachment
            if (attachmentIdCreated != ''){
                deleteAttachment(attachmentIdCreated, 
                    function(){
                        //OK
                        // Buttons visibility
                        j$('#uploadspinner').hide();
                        j$('#uploadButton').hide();
                        j$('#refreshButton').show();
                        j$('#cancelButton').hide();
                        j$('#clearButton').show();
                    }, 
                    function(){
                        //KO
                        // Show error
                        showUploadError(currentFile.name + ' --> ' + event.message, false);
                        // Buttons visibility
                        j$('#uploadspinner').hide();
                        j$('#uploadButton').hide();
                        j$('#refreshButton').show();
                        j$('#cancelButton').hide();
                        j$('#clearButton').show();
                    });
            }
        }
    
        //Delete the attachment created. Use js remoting to delete the attachment
        function deleteAttachment(attachmentId, callbackOK, callbackKO){
            FileUploadController.deleteAttachment(attachmentId,function(result,event){
                if(event.status == true){
                    //All OK
                    if (typeof callbackOK == 'function'){callbackOK();}
                } else {
                    //If script is here something broke on the JavasSript remoting call
                    if (typeof callbackKO == 'function'){callbackKO();}
                }
            }); 
        }   
        
        //Executes when start Upload button is selected
        function prepareFileUploads(){
            // Init stop process
            stopProcess = false;
            
            //Get the file(s) from the input field
            files = document.getElementById('filesInput').files;
    
            //Disable inputs and buttons during the upload process
            j$("#filesInput").attr("disabled", "disabled");
            j$('#uploadButton').hide();
            j$('#refreshButton').hide();
            j$('#cancelButton').show();
            j$('#clearButton').hide();
    
            //Build out the upload divs for each file selected
            var uploadMarkup = '';
            for(i = 0; i < files.length; i++){
                //Determine file display size
                if(files[i].size < 1000000){
                    var displaySize = Math.floor(files[i].size/1000) + 'Kb';
                }else{
                    var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'Mb';
                }
    
                //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                uploadMarkup += '<div>';
                uploadMarkup += '<div class="fileName"><span class="name">'+ files[i].name + '</span> - '+ displaySize+ '</div>';
                uploadMarkup += '<div class="percentComplete">0%</div>'
                uploadMarkup += '<div class="clear"/>';
                uploadMarkup += '<div class="statusBar">';
                uploadMarkup += '<div class="statusBarPercent"/>';
                uploadMarkup += '</div>';
                uploadMarkup += '</div>';
                uploadMarkup += '<input type="button" title="Delete" class="btn deleteButton" style="display: none;" value=" Delete "/>';
                uploadMarkup += '</div>';
            }
    
            //Add markup to the upload box
            j$('.uploadBox').append(uploadMarkup);
    
            //Once elements have been added to the page representing the uploads, start the actual upload process
            checkForUploads();
        }
    
        //Once elements have been added to the page representing the uploads, start the actual upload process
        function checkForUploads(){
            //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
            $upload = j$(".upload:first[data-status='pending']");
    
            if($upload.length != 0){
                //Based on index of the div, get correct file from files array
                currentFile = files[$upload.attr('data-index')];
    
                /*Build the byteChunkArray array for the current file we are processing. This array is formatted as:
                ['0-179999','180000-359999',etc] and represents the chunks of bytes that will be uploaded individually.*/
                byteChunkArray = new Array();  
    
                //First check to see if file size is less than the chunk size, if so first and only chunk is entire size of file
                if(currentFile.size <= CHUNK_SIZE){
                    byteChunkArray[0] = '0-' + (currentFile.size - 1);
                }else{
                    //Determine how many whole byte chunks make up the file,
                    var numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE); //i.e. 1.2Mb file would be 1000000 / CHUNK_SIZE
                    var remainderBytes = currentFile.size % CHUNK_SIZE; // would determine remainder of 1200000 bytes that is not a full chunk
                    var startByte = 0;
                    var endByte = CHUNK_SIZE - 1;
    
                    //Loop through the number of full chunks and build the byteChunkArray array
                    for(i = 0; i < numOfFullChunks; i++){
                        byteChunkArray[i] = startByte+'-'+endByte;
    
                        //Set new start and stop bytes for next iteration of loop
                        startByte = endByte + 1;
                        endByte += CHUNK_SIZE;
                    }
    
                    //Add the last chunk of remaining bytes to the byteChunkArray
                    startByte = currentFile.size - remainderBytes;
                    endByte = currentFile.size;
                    byteChunkArray.push(startByte+'-'+endByte);
                }
    
                //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
               
                //attachmentIdCreated = '';
                processByteChunkArray(attachmentIdCreated);
    
            }else{
                //All uploads completed, enable the input and buttons
                j$("#filesInput").removeAttr("disabled");
                j$('#uploadButton').hide();
                j$('#refreshButton').show();
                j$('#cancelButton').hide();
                j$('#clearButton').show();
    
                /*Remove the browse input element and replace it, this essentially removes
                the selected files and helps prevent duplicate uploads*/
                replaceFilesInput();
            }
        }
        
        //Uploads a chunk of bytes, if attachmentId is passed in it will attach the bytes to an existing attachment record
        function processByteChunkArray(attachmentId){
            //If value is TRUE, stop
            if (stopProcess){
                cancelFileUploads();
                return;
            }
            
            //Proceed if there are still values in the byteChunkArray, if none, all piece of the file have been uploaded
            if(byteChunkArray.length > 0){
                //Determine the byte range that needs to uploaded, if byteChunkArray is like... ['0-179999','180000-359999']
                var indexes = byteChunkArray[0].split('-'); //... get the first index range '0-179999' -> ['0','179999']
                var startByte = parseInt(indexes[0]); //0
                var stopByte = parseInt(indexes[1]); //179999
    
                //Slice the part of the file we want to upload, currentFile variable is set in checkForUploads() method that is called before this method
                if(currentFile.slice){
                    var blobChunk = currentFile.slice(startByte , stopByte + 1);
                }else if (currentFile.mozSlice) {
                    var blobChunk = currentFile.mozSlice(startByte , stopByte + 1);
                }
    
                //Create a new reader object, part of HTML5 File API
                reader = new FileReader();
    
                //Read the blobChunk as a binary string, reader.onloadend function below is automatically called after this line
                reader.readAsBinaryString(blobChunk);
    
                //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
                reader.onloadend = function(evt){ 
                    if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                        //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                        var base64value = window.btoa(evt.target.result);
    
                        //Use js remoting to send the base64 encoded chunk for uploading
                        FileUploadController.attachBlob(objectId, attachmentId, currentFile.name,currentFile.type,base64value,function(result,event){
    
                            //Proceed if there were no errors with the remoting call
                            if(event.status == true){
                                //Update the percent of the status bar and percent, first determine percent complete
                                var percentComplete = Math.round((stopByte / currentFile.size) * 100);
                                $upload.find(".percentComplete").text(percentComplete + '%');
                                $upload.find(".statusBarPercent").css('width',percentComplete + '%');
    
                                //Remove the index information from the byteChunkArray array for the piece just uploaded.
                                byteChunkArray.shift(); //removes 0 index
    
                                //Set the attachmentId of the file we are now processing
                                attachmentId = result;
                                attachmentIdCreated = result;
    
                                //Call process byteChunkArray to upload the next piece of the file
                                processByteChunkArray(attachmentId);
    
                            }else{
                                //If script is here something broke on the JavasSript remoting call
                                //Add classes to reflect error
                                $upload.attr('data-status','error');
                                $upload.addClass('uploadError');
                                $upload.find(".statusPercent").addClass('statusPercentError');
                                $upload.attr('title',event.message);
    
                                //Show error
                                showUploadError(currentFile.name + ' --> ' + event.message, false);
                                
                                //Delete attachment created
                                if (attachmentIdCreated != ''){deleteAttachment(attachmentIdCreated);}
                                 
                                //Check and continue the next file to upload
                                checkForUploads();
                            }
                        }); 
                    }else{
                        //Error handling for bad read
                        showUploadError(currentFile.name + ' --> ' + 'Could not read file', false);
                    }
                };
            }else{
                //This file has completed, all byte chunks have been uploaded, set status on the div to complete
                $upload.attr('data-status','complete');
                $upload.attr('title','Upload completed');
                
                //Change name of file to link of uploaded attachment
                $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');
    
                //Set the id of attachment and show delete button
                $upload.find(".deleteButton").attr('id', attachmentId);
                $upload.find(".deleteButton").show();
                
                //Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process. 
                checkForUploads();
            }
        }
    
        /*Remove the browse input element and replace it, this essentially removes
        the selected files and helps prevent duplicate uploads*/
        function replaceFilesInput(){
            j$("#filesInput").replaceWith('<input type="file" name="filesInput" id="filesInput" multiple="true">');
        }
        
        //Show the message error
        function showUploadError(message, bWarning){
            //If bWarning, is warning, else is error
            if (bWarning){
                j$('#uploadErrorContent').removeClass('errorM3').addClass('warningM3');
                j$('#uploadErrorTitle').html('Warning');
            } else {
                j$('#uploadErrorContent').removeClass('warningM3').addClass('errorM3');
                j$('#uploadErrorTitle').html('Error');
            }
            
            //If error is visible, append the new error
            if(j$('#uploadErrorContent').is(':visible')){
                j$('#uploadErrorBody').html(j$('#uploadErrorBody').html() + '<br/>' + message);
            } else {
                j$('#uploadErrorBody').html(message);
                j$('#uploadErrorContent').show();
            }
        }
        
        //Hide de message error
        function hideUploadError(){
            j$('#uploadErrorContent').hide();
            j$('#uploadErrorBody').html('');
        }
    
        //Check size of files ti upload
        function checkSize(){ 
            //Get the file(s) from the input field
            files = document.getElementById('filesInput').files;
    
            //Check size
            var iSize;
            var iInitSize;
            var strSize = '';
            var strError = '';
            for(i = 0; i < files.length; i++){
                //Determine file display size
                iSize = iInitSize = (files[i].size / 1024); 
                var strSize = '';
                if (iSize / 1024 > 1){ 
                    if (((iSize / 1024) / 1024) > 1){ 
                        iSize = (Math.round(((iSize / 1024) / 1024) * 100) / 100);
                        strSize = iSize + "Gb"; 
                    }else{ 
                        iSize = (Math.round((iSize / 1024) * 100) / 100)
                        strSize = iSize + "Mb"; 
                    } 
                }else{
                    iSize = (Math.round(iSize * 100) / 100)
                    strSize = iSize  + "Kb"; 
                }
                if ((iInitSize / 1024) > 4){
                    strError += '<br/>' + files[i].name + ' --> Tamaño ' + strSize;
                }
            }
            //If size exceeds limit
            if (strError != ''){
                strError = 'The maximum file size allowed by heap size limits currently is approximately 4Mb. The following files exceed this limit. But try to upload it anyway.' + '<br/>' + strError 
                showUploadError(strError, true);
            }
        }
    </script>
</apex:component>